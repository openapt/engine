#!/bin/sh
asm_test() {
	res=`rasm2 -ax86.new -b32 "$1"`
	disas=`rasm2 -d -ax86 -b32 $res | tr "\\n" ";"`
	printf "Assembled $1 to $res\n"
	if [ "$res" = "$2" ]; then
		echo -e "\x1b[32mOK\x1b[0m ($disas)"
	else
		echo -e "\x1b[31mFAILED\x1b[0m ($disas), expected $2"
	fi
}

# PARSER tests
asm_test 'int3' cc

# OPCODES
# operations without operands
asm_test 'fsin' d9fe
asm_test 'pushad' 60
asm_test 'aaa' 37
asm_test 'stc' f9
asm_test 'ret' c3
asm_test 'rep stosd' f3ab
asm_test 'rdtsc' 0f31

# single byte with implicit operands
asm_test 'pop ecx' 59
asm_test 'push edi' 57
asm_test 'xchg eax, eax' 90
asm_test 'xchg eax, edx' 92
asm_test 'in eax, dx' ed
asm_test 'out dx, al' ee
asm_test 'bswap esi' 0fce

# immediate operands
asm_test 'int 0xab' cdab
asm_test 'ret 0x1234' c23412
asm_test 'mov eax, 0' b800000000
asm_test 'mov edx, 0x12345678' ba78563412
asm_test 'out 0x23, al' e623
asm_test 'add eax, 0x12' 0512000000 # or 83C012 ?
asm_test 'add eax, 0x12345678' 0578563412
asm_test 'add dword ptr [esp+4], 0x12' 8344240412
asm_test 'add dword ptr [esp+4], 0x12345678' 8144240478563412

# register/memory
asm_test 'add byte ptr [edx], al' 0002
asm_test 'or [edx], eax' 0902
asm_test 'lea eax, [eax+2*ecx]' 8d0448

# FPU registers
asm_test 'fadd st(0), st(1)' d8c1
asm_test 'fadd st(0), dword ptr [edx]' d802
asm_test 'fadd st(0), qword ptr [edx]' dc02
asm_test 'fadd st(1), st(0)' dcc1

# MMX registers
asm_test 'pcmpgtw mm(3), mm(7)' 0f65df
asm_test 'punpckldq mm(3), qword ptr [edx+4*eax]' 0f621c82

# XMM registers
asm_test 'movups xmm(0), xmm(5)' 0f10c5
asm_test 'movups xmm(3), oword ptr [esi]' 0f101e
asm_test 'movups oword ptr [esi], xmm(7)' 0f113e

# Mix of registers / register-only operations
asm_test 'movd ebx, mm(2)' 0f7ed3
asm_test 'movmskps edx, xmm(5)' 0f50d5
asm_test 'pinsrw mm(3), eax, 3' 0fc4d803
asm_test 'pextrw edx, mm(5), 1' 0fc5d501

# complex
asm_test 'imul eax, ecx, 21' 6bc115
asm_test 'imul eax, ecx, 0x12345' 69c145230100
asm_test 'shufps xmm(3), xmm(5), 0xab' 0fc6ddab

# MEMORY operands
# Immediates
asm_test 'mov eax, dword ptr [0]' 8b0500000000
asm_test 'mov eax, dword ptr [0x12345678]' 8b0578563412

# indirect addressing
asm_test 'cmp edi, [esi+0x8]' 3b7e08
asm_test 'cmp ebx, [esp+0x8]' 3b5c2408
asm_test 'cmp edi, [ebp+0x500]' 3bbd00050000

asm_test 'add eax, dword ptr [0]' 030500000000
asm_test 'add eax, dword ptr [edx]' 0302
asm_test 'add eax, dword ptr [edx + 4]' 034204
asm_test 'add eax, dword ptr [edx + 0x12345678]' 038278563412
asm_test 'add eax, dword ptr [ebp]' 034500
asm_test 'add eax, dword ptr [ebp + 4]' 034504
asm_test 'add eax, dword ptr [ebp + 0x12345678]' 038578563412
asm_test 'add eax, dword ptr [esp]' 030424
asm_test 'add eax, dword ptr [esp + 4]' 03442404
asm_test 'add eax, dword ptr [esp + 0x12345678]' 03842478563412
asm_test 'add eax, dword ptr [0x12 + 2*ecx]' 03044d12000000
asm_test 'add eax, dword ptr [0x12345678 + 2*ecx]' 03044d78563412
asm_test 'add eax, dword ptr [eax + 2*ecx]' 030448
asm_test 'add eax, dword ptr [eax + 2*ecx + 4]' 03444804
asm_test 'add eax, dword ptr [eax + 2*ecx + 0x12345678]' 03844878563412
asm_test 'add eax, dword ptr [5*eax]' 030480
asm_test 'add eax, dword ptr [1 + 41*57 + eax]' 038022090000

# jump addresses
asm_test 'je 0x17' 7415
asm_test 'jmp 0x12345678' e973563412
asm_test 'jmp 0x17' eb15
asm_test 'je 0x17; jmp 0x17' 7415eb13
